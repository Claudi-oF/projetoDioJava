[33mcommit d56c11b7f022f93d9201ce6b72fab309151a1a2f[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmain[m[33m, [m[1;31morigin/main[m[33m)[m
Author: Claudi-oF <claudiofilhocf123@gmail.com>
Date:   Wed Sep 11 19:36:32 2024 -0300

    Pesquisa List

[1mdiff --git a/bin/estudosPooJava/edu/claudio/semana3/Lista/OperacoesBasicas/CarrinhoDeCompras.class b/bin/estudosPooJava/edu/claudio/semana3/Lista/OperacoesBasicas/CarrinhoDeCompras.class[m
[1mnew file mode 100644[m
[1mindex 0000000..0e251a8[m
Binary files /dev/null and b/bin/estudosPooJava/edu/claudio/semana3/Lista/OperacoesBasicas/CarrinhoDeCompras.class differ
[1mdiff --git a/bin/estudosPooJava/edu/claudio/semana3/Lista/OperacoesBasicas/Item.class b/bin/estudosPooJava/edu/claudio/semana3/Lista/OperacoesBasicas/Item.class[m
[1mnew file mode 100644[m
[1mindex 0000000..bd5cb80[m
Binary files /dev/null and b/bin/estudosPooJava/edu/claudio/semana3/Lista/OperacoesBasicas/Item.class differ
[1mdiff --git a/bin/estudosPooJava/edu/claudio/semana3/Lista/ListaTarefa.class b/bin/estudosPooJava/edu/claudio/semana3/Lista/OperacoesBasicas/ListaTarefa.class[m
[1msimilarity index 68%[m
[1mrename from bin/estudosPooJava/edu/claudio/semana3/Lista/ListaTarefa.class[m
[1mrename to bin/estudosPooJava/edu/claudio/semana3/Lista/OperacoesBasicas/ListaTarefa.class[m
[1mindex 2f48d63..73446c5 100644[m
Binary files a/bin/estudosPooJava/edu/claudio/semana3/Lista/ListaTarefa.class and b/bin/estudosPooJava/edu/claudio/semana3/Lista/OperacoesBasicas/ListaTarefa.class differ
[1mdiff --git a/bin/estudosPooJava/edu/claudio/semana3/Lista/OperacoesBasicas/Tarefa.class b/bin/estudosPooJava/edu/claudio/semana3/Lista/OperacoesBasicas/Tarefa.class[m
[1mnew file mode 100644[m
[1mindex 0000000..13a533b[m
Binary files /dev/null and b/bin/estudosPooJava/edu/claudio/semana3/Lista/OperacoesBasicas/Tarefa.class differ
[1mdiff --git a/bin/estudosPooJava/edu/claudio/semana3/Lista/PesquisaEmList/CatalogoLivros.class b/bin/estudosPooJava/edu/claudio/semana3/Lista/PesquisaEmList/CatalogoLivros.class[m
[1mnew file mode 100644[m
[1mindex 0000000..8073759[m
Binary files /dev/null and b/bin/estudosPooJava/edu/claudio/semana3/Lista/PesquisaEmList/CatalogoLivros.class differ
[1mdiff --git a/bin/estudosPooJava/edu/claudio/semana3/Lista/PesquisaEmList/Livro.class b/bin/estudosPooJava/edu/claudio/semana3/Lista/PesquisaEmList/Livro.class[m
[1mnew file mode 100644[m
[1mindex 0000000..1377a69[m
Binary files /dev/null and b/bin/estudosPooJava/edu/claudio/semana3/Lista/PesquisaEmList/Livro.class differ
[1mdiff --git a/bin/estudosPooJava/edu/claudio/semana3/Lista/README.md b/bin/estudosPooJava/edu/claudio/semana3/Lista/README.md[m
[1mnew file mode 100644[m
[1mindex 0000000..7115fd6[m
[1m--- /dev/null[m
[1m+++ b/bin/estudosPooJava/edu/claudio/semana3/Lista/README.md[m
[36m@@ -0,0 +1,104 @@[m
[32m+[m[32m# List Interface[m
[32m+[m
[32m+[m[32m<p align="center">[m
[32m+[m[32m<img src="../../../../assets/image/list-interface-hierarchy.png" alt="List interface hierarchy Java"><br>[m
[32m+[m[32m<a href="https://data-flair.training/blogs/collection-framework-in-java/">Hierarchy of Collection Framework in Java </a>[m
[32m+[m[32m</p>[m
[32m+[m
[32m+[m[32m- A interface <code>List</code> √© uma cole√ß√£o ordenada que permite a inclus√£o de elementos duplicados.[m
[32m+[m[32m- √â um dos tipos de cole√ß√£o mais utilizados em Java, e as classes de implementa√ß√£o comuns s√£o <code>ArrayList</code> e <code>LinkedList</code>.[m
[32m+[m[32m- A <code>List</code> se assemelha a uma matriz com comprimento din√¢mico, permitindo adicionar ou remover elementos.[m
[32m+[m[32m- A interface <code>List</code> fornece m√©todos √∫teis para adicionar elementos em posi√ß√µes espec√≠ficas, remover ou substituir elementos com base no √≠ndice e obter sublistas usando √≠ndices.[m
[32m+[m[32m- A classe <code>Collections</code> fornece algoritmos √∫teis para manipula√ß√£o de <code>List</code>, como ordena√ß√£o (sort), embaralhamento (shuffle), revers√£o (reverse) e busca bin√°ria (binarySearch).[m
[32m+[m
[32m+[m[32m> ##### *ArrayList*: O ArrayList √© uma implementa√ß√£o da interface List que armazena os elementos em uma estrutura de array redimension√°vel. Isso significa que ele pode crescer automaticamente √† medida que novos elementos s√£o adicionados. A principal vantagem do ArrayList √© o acesso r√°pido aos elementos por meio de √≠ndices, o que permite recuperar um elemento espec√≠fico de forma eficiente. No entanto, adicionar ou remover elementos no meio da lista pode ser mais lento, pois requer a realoca√ß√£o de elementos.[m
[32m+[m
[32m+[m[32m> ##### *LinkedList*: O LinkedList √© uma implementa√ß√£o da interface List que armazena os elementos em uma lista duplamente vinculada. Cada elemento cont√©m refer√™ncias para o elemento anterior e pr√≥ximo na lista. A principal vantagem do LinkedList √© a efici√™ncia na adi√ß√£o ou remo√ß√£o de elementos no in√≠cio ou no final da lista, pois n√£o √© necess√°rio realocar elementos. No entanto, o acesso aos elementos por meio de √≠ndices √© mais lento, pois requer percorrer a lista at√© o elemento desejado.[m
[32m+[m
[32m+[m[32m> ##### *Vector*: O Vector √© uma implementa√ß√£o antiga da interface List que √© semelhante ao ArrayList, mas √© sincronizada, ou seja, √© thread-safe. Isso significa que v√°rias threads podem manipular um objeto Vector ao mesmo tempo sem causar problemas de concorr√™ncia. No entanto, essa sincroniza√ß√£o adiciona uma sobrecarga de desempenho, tornando o Vector menos eficiente do que o ArrayList em cen√°rios em que a concorr√™ncia n√£o √© um problema. Por esse motivo, o uso do Vector √© menos comum em aplica√ß√µes modernas.[m
[32m+[m
[32m+[m[32m### Refer√™ncias:[m
[32m+[m
[32m+[m[32m[1] "Collections in Java Tutorial." DigitalOcean Community. Dispon√≠vel em: https://www.digitalocean.com/community/tutorials/collections-in-java-tutorial.[m
[32m+[m
[32m+[m[32m[2] "Java‚Ñ¢ Platform, Standard Edition 17 API Specification - Class List." Oracle. Dispon√≠vel em: https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/List.html.[m
[32m+[m
[32m+[m[32m# Fixando os Conhecimentos[m
[32m+[m
[32m+[m[32mExerc√≠cios:[m
[32m+[m
[32m+[m[32m1. Opera√ß√µes B√°sicas com List[m
[32m+[m[32m2. Pesquisa em List[m
[32m+[m[32m3. Ordena√ß√£o nas List[m
[32m+[m
[32m+[m[32m## Opera√ß√µes B√°sicas com List[m
[32m+[m
[32m+[m[32m### 1. Lista de Tarefas[m
[32m+[m[32m<p>Crie uma classe chamada "ListaTarefas" que possui uma lista de tarefas como atributo. Cada tarefa √© representada por uma classe chamada "Tarefa" que possui um atributo de descri√ß√£o. Implemente os seguintes m√©todos:[m
[32m+[m
[32m+[m[32m- `adicionarTarefa(String descricao)`: Adiciona uma nova tarefa √† lista com a descri√ß√£o fornecida.[m
[32m+[m[32m- `removerTarefa(String descricao)`: Remove uma tarefa da lista com base em sua descri√ß√£o.[m
[32m+[m[32m- `obterNumeroTotalTarefas()`: Retorna o n√∫mero total de tarefas na lista.[m
[32m+[m[32m- `obterDescricoesTarefas()`: Retorna uma lista contendo a descri√ß√£o de todas as tarefas na lista.[m
[32m+[m[32m</p>[m
[32m+[m
[32m+[m[32m### 2. Carrinho de Compras:[m
[32m+[m
[32m+[m[32m<p>Crie uma classe chamada "CarrinhoDeCompras" que representa um carrinho de compras online. O carrinho deve ser implementado como uma lista de itens. Cada item √© representado por uma classe chamada "Item" que possui atributos como nome, pre√ßo e quantidade. Implemente os seguintes m√©todos:[m
[32m+[m
[32m+[m[32m- `adicionarItem(String nome, double preco, int quantidade)`: Adiciona um item ao carrinho com o nome, pre√ßo e quantidade especificados.[m
[32m+[m[32m- `removerItem(String nome)`: Remove um item do carrinho com base no seu nome.[m
[32m+[m[32m- `calcularValorTotal()`: Calcula e retorna o valor total do carrinho, levando em considera√ß√£o o pre√ßo e a quantidade de cada item.[m
[32m+[m[32m- `exibirItens()`: Exibe todos os itens presentes no carrinho, mostrando seus nomes, pre√ßos e quantidades.[m
[32m+[m[32m</p>[m
[